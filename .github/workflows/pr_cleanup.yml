name: PR Cleanup on Complete

on:
  pull_request_target:
    types: [labeled]

jobs:
  cleanup:
    name: Close PR, Issue and Delete Branch
    if: ${{ github.event.action == 'labeled' && github.event.label.name == 'complete' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: write # to delete branch

    steps:
      - name: Close PR, Issue and Delete Branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const branchName = "${{ github.event.pull_request.head.ref }}";
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // 1. Merge the Pull Request
            core.info(`Attempting to merge PR #${prNumber}...`);
            try {
              await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: prNumber,
                commit_title: `Merge pull request #${prNumber} from ${branchName}`,
                commit_message: `Automatically merged by workflow due to 'complete' label.`,
                merge_method: 'squash' // Or 'merge', 'rebase' - 'squash' is often preferred for clean history
              });
              core.info(`✅ PR #${prNumber} merged successfully.`);
            } catch (error) {
              core.error(`Failed to merge PR #${prNumber}. Error: ${error.message}`);
              // If merge fails, we might still want to proceed with closing/deleting if the user intends to manually merge later.
              // For now, I'll let it continue, but a more robust solution might stop here or notify.
            }

            // 2. Close the Pull Request (if not already closed by merge)
            core.info(`Closing PR #${prNumber}...`);
            await github.rest.pulls.update({
              owner,
              repo,
              pull_number: prNumber,
              state: 'closed'
            });
            core.info(`✅ PR #${prNumber} closed.`);

            // 3. Extract issue number and close the issue
            const match = branchName.match(/^issue-(\d+)$/);
            if (match && match[1]) {
              const issueNumber = parseInt(match[1], 10);
              core.info(`Found linked issue #${issueNumber} from branch name '${branchName}'. Closing...`);
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              core.info(`✅ Issue #${issueNumber} closed.`);
            } else {
              core.warning(`Could not find a linked issue number in branch name '${branchName}'.`);
            }

            // 4. Delete the branch
            core.info(`Deleting branch '${branchName}'...`);
            try {
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `heads/${branchName}`
              });
              core.info(`✅ Branch '${branchName}' deleted.`);
            } catch (error) {
              core.error(`Failed to delete branch '${branchName}'. It might have been already deleted. Error: ${error.message}`);
            }
